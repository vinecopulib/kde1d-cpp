name: CMake

on: 
  push:
  pull_request:
  release:

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest MSVC", artifact: "Windows-MSVC.tar.xz",
            os: windows-latest,
            build_type: "Release", cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
        - {
            name: "Windows Latest MinGW", artifact: "Windows-MinGW.tar.xz",
            os: windows-latest,
            build_type: "Release", cc: "gcc", cxx: "g++"
          }
        - {
            name: "Ubuntu Latest GCC", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            build_type: "Debug", cc: "gcc", cxx: "g++"
          }
        - {
            name: "macOS Latest Clang", artifact: "macOS.tar.xz",
            os: macos-latest,
            build_type: "Release", cc: "clang", cxx: "clang++"
          }

    steps:
    - uses: actions/checkout@v2
    - uses: codecov/codecov-action@v2

    - name: Install other dependencies
      run:   |
          if [ "${{ matrix.config.os }}" == "ubuntu-latest" ]; then
            sudo apt-get update
            sudo apt-get install --no-install-recommends -y lcov libeigen3-dev libboost-all-dev
            sudo apt-get install --no-install-recommends -y --allow-unauthenticated g++ clang
            sudo apt-get autoremove
          elif [ "${{ matrix.config.os }}" == "macos-latest" ]; then
            brew update
            brew install lcov eigen boost
          elif [ "${{ matrix.config.os }}" == "windows-latest" ]; then
            # cmd "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.config.platform }}
            # choco upgrade cmake
            choco install boost-msvc-14.1
            choco install wget
            wget http://gitlab.com/libeigen/eigen/-/archive/3.3.7/eigen-3.3.7.zip
            7z x eigen-3.3.7.zip -o"C:\projects" -y > nul
            echo "EIGEN3_INCLUDE_DIR=C:\projects\eigen-3.3.7" >> $GITHUB_ENV
          fi
      shell: bash

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.config.build_type}} -DEigen3_DIR="${EIGEN3_INCLUDE_DIR}"

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{matrix.config.build_type}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      if: runner.os == 'Windows'
      run: "bin/Release/test.exe"

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      if: runner.os != 'Windows'
      run: ./bin/test