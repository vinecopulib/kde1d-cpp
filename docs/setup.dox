/** @page setup Setup

@tableofcontents

- [Requirements](#requirements)
- [How to build the library](#build-lib)
- [How to install the library](#install-lib)
- [How to include the library in other projects](#include-lib)
    - [As a header only library](#include-headers)
    - [Using a system install](#include-install)
    - [In a CMake project](#include-cmake)

@section Requirements

To build the library, you'll need at minimum:

   - [a C++17-compatible compiler](https://en.wikipedia.org/wiki/List_of_compilers#C.2B.2B_compilers) (tested with GCC 6.3.0 and Clang 3.5.0 on Linux and AppleClang 8.0.0 on OSX)
   - [CMake 3.2 (or later)](https://cmake.org/)
   - [Boost 1.56 (or later)](http://www.boost.org/)
   - [Eigen 3.3 (or later)](http://eigen.tuxfamily.org/index.php?title=Main_Page)

Optionally, you'll need:
   - [Doxygen](http://www.stack.nl/~dimitri/doxygen/) and [graphviz](https://www.graphviz.org/) (to build the documentations)


@section build-lib How to build the library

By default, kde1d is header-only. It means that we use the CMake build
system, but only to build the documentation and unit-tests, and to automate
installation (i.e., place headers in the usual location).
If you just want to use kde1d, you can use the header files
(located in the`includes`folder) right away.

The unix one liner (from the root folder):

```
mkdir build && cd build && cmake .. && make && make doc &&
sudo make install && bin/test
```

| Step | Shell command  |
|-----------------------|------------------------------------|
| Create a build folder  | `mkdir build` |
| Move to the created folder  | `cd build` |
| Create the `MakeFile` via cmake  |  `cmake .. ` |
| Compile the library | `make` or `make -j n` where `n` is the number of cores |
| Build the documentation (optional)  | `make doc` |
| Install the library on linux/OSX (optional)  | `sudo make install` |
| Run unit tests (optional)  |  `bin/[test_executable]` |

@section install-lib How to install the library

To install the library without unit tests, the `MakeFile` can be created via
`cmake .. -DBUILD_TESTING=OFF`.
Additionally, a `Debug` mode is available via
`cmake .. -DCMAKE_BUILD_TYPE=Debug`; to enable strict compiler warnings, use
`-DSTRICT_COMPILER=ON`.
Finally, note that using `-DCMAKE_EXPORT_COMPILE_COMMANDS=ON` is useful if
one is interested in using autocomplete or linting when working with the library.

On Windows, CMake will generate Visual Studio files instead of Makefiles,
the following sequence of commands can be used to perform compilation using the command prompt:
```
md build
cd build
cmake ..
cmake --build . --config Debug
cmake --build . --config Release
cmake --build . --config Release --target install
```
Instead of the `cmake --build` commands, the generated `kde1d.sln` file can be open in the Visual Studio GUI.

The following CMake flags (given with example values) will likely come handy:
```
-DBOOST_ROOT=c:\local\boost_1_63_0
-DEIGEN3_INCLUDE_DIR=c:\local\eigen-eigen-da9b4e14c255
-DCMAKE_INSTALL_PREFIX=c:\local\kde1d-install
-DCMAKE_GENERATOR_PLATFORM=x64
-DBOOST_DEBUG=1
```

@section include-lib How to include the library in other projects

@subsection include-headers As a header only library

The library can be included header only by simply copying the files in your
project.

@subsection include-install Using a system install
Using `make install`, kde1d is installed in the usual location of the
system, namely

- `<prefix>/include/` (for the headers),
- `<prefix>/lib/` (for the shared library when `KDE1D_SHARED_LIB=ON` is used),
- `<prefix>/lib/cmake/kde1d` (to allow cmake to find the library
with `find_package`),

where `<prefix>` is e.g. `/usr/` or `/usr/local`. Note that
`make install` only copies `kde1d.hpp` in `<prefix>/include/` and
puts the other headers in a subfolder `<prefix>/include/kde1d`, but using
`#include <kde1d.hpp>` is enough to load both bivariate and vine functions.

@subsection include-cmake In a CMake project

The easiest way to include kde1d in another project (and to avoid writing makefiles)
is to use CMake. For instance, an example projet where the source code to be linked could contain
- a `CMakeLists.txt` file for the project's setup,
- a subfolder `src` for the source code, containing
   - the source code,
   - another `CMakeLists.txt` file for the project libraries and executables.

The top-level `CMakeLists.txt` could be:

```cmake
cmake_minimum_required(VERSION 3.2)

set(CMAKE_CXX_STANDARD 11)

project (Example)

# Setting default folders
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)

# C++ compile flags
if (NOT WIN32)
 set(CMAKE_CXX_FLAGS "-std=gnu++11 -Wextra -Wall -Wno-delete-non-virtual-dtor -Werror=return-type -O2 -DNDEBUG")
endif()

# Find kde1d package and dependencies
find_package(kde1d                  REQUIRED)
find_package(Boost 1.56                   REQUIRED)
include(cmake/findEigen3.cmake            REQUIRED)

# Set required variables for includes and libraries
# In the second line
#   * KDE1D_LIBRARIES is needed if kde1d has been built as a
#     shared lib (does nothing otherwise).
#   * CMAKE_THREAD_LIBS_INIT is needed for some linux systems
#     (but does nothing on OSX/Windows).
set(external_includes ${KDE1D_INCLUDE_DIR} ${EIGEN3_INCLUDE_DIR} ${Boost_INCLUDE_DIRS})
set(external_libs ${KDE1D_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})

# Include subdirectory with project sources
add_subdirectory(src)
```

Assuming a single `main.cpp` source file (with `#include <kde1d.hpp>` at
the top), the `CMakeLists.txt` file in `/src/`
could then be:

```cmake
# Include header files
include_directories(${external_includes})

# Add main executable
add_executable(main main.cpp)

# Link to kde1d if kde1d has been built as a shared lib
# and to pthreads on some linux systems (does nothing otherwise)
target_link_libraries(main ${KDE1D_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
```

**/
